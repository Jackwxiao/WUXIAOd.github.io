<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 小xiao潇的个人博客</title>
    <link>http://www.pigxw.top/posts/</link>
    <description>Recent content in Posts on 小xiao潇的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 31 Mar 2020 21:31:29 +0800</lastBuildDate>
    
	<atom:link href="http://www.pigxw.top/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>手写Promise</title>
      <link>http://www.pigxw.top/%E6%89%8B%E5%86%99promise/</link>
      <pubDate>Tue, 31 Mar 2020 21:31:29 +0800</pubDate>
      
      <guid>http://www.pigxw.top/%E6%89%8B%E5%86%99promise/</guid>
      <description>自定义实现 Promise promise 构造函数的实现：  /* Promise 构造函数 executor: 内部同步执行的函数 (resolve, reject) =&amp;gt; {} */ function Promise(executor) { const self = this self.status = &#39;pending&#39; &amp;lt;!-- 状态值, 初始状态为 pending, 成功了变为 resolved, 失败了变为 rejected --&amp;gt; self.data = undefined &amp;lt;!-- 用来保存成功 value 或失败 reason 的属性 --&amp;gt; self.callbacks = [] &amp;lt;!-- 用来保存所有待调用的包含 onResolved 和 onRejected 回 调函数的对象的数组 --&amp;gt; /* 异步处理成功后应该调用的函数 value: 将交给 onResolve()的成功数据 */ function resolve(value) { if (self.status !== &#39;pending&#39;) { &amp;lt;!</description>
    </item>
    
    <item>
      <title>Promise</title>
      <link>http://www.pigxw.top/promise/</link>
      <pubDate>Sun, 22 Mar 2020 19:17:26 +0800</pubDate>
      
      <guid>http://www.pigxw.top/promise/</guid>
      <description>异步与Promise 如果 JS 不能直接拿到一个函数的结果，可以先去执行别的代码，等结果到了再取结果，这就是异步
异步的结果可以通过轮询获取，轮询就是定时去询问结果拿到了没有
异步的结果可以通过回调获取，一般来说结果会被作为回调的第一个参数
异步的好处是可以把用来等待的时间拿去做别的事情
promise的由来  promise 是现在前端解决异步问题的统一方案！！！！
Promise 不是前端发明的
window.Promise 是一个全局函数，可以用来构造 Promise 对象
使用 return new Promise((resolve, reject)=&amp;gt; {}) 就可以构造一个 Promise 对象
构造出来的 Promise 对象含有一个 .then() 函数属性
resolve 和 reject 都只接受一个参数
resolve 和 reject 并不是 .then(succes, fail) 里面的 success 和 fail，resolve 会去调用 &amp;gt;success，reject 会去调用 fail 插一道面试题：
 const array= [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;].map( parseInt） console.log( array ) // [1,NaN,NaN]  只能这样写：
const array= [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;].map( item =&amp;gt;parseInt(item)） console.log( array ) // [1,2,3]  异步任务拿不到结果，于是传一个回调给异步任务，异步任务完成时调用回调，调用的时候把结果作为参数。 如果有两结果呢，比如成功和失败</description>
    </item>
    
    <item>
      <title>Vuex 从基础到深入</title>
      <link>http://www.pigxw.top/vuex-%E5%9F%BA%E7%A1%80%E5%88%B0%E6%B7%B1%E5%85%A5/</link>
      <pubDate>Tue, 03 Mar 2020 21:29:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/vuex-%E5%9F%BA%E7%A1%80%E5%88%B0%E6%B7%B1%E5%85%A5/</guid>
      <description>小范围数据共享方式：
 父向子传值： v-bind属性绑定 子向父传值： v-on 事件绑定 兄弟组件之间共享数据： eventBus   数据接收方定义 $on 事件
 数据发送方定义 $emit 触发
  Vuex Vuex 是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间数据的共享。
有无 Vuex 的区别图解
使用 Vuex 统一管理状态的好处：  能够在 Vuex 中集中管理共享的数据，已于开发和后期维护； 能够高效实现组件之间的数据共享，提高开发效率； 存储在 Vuex 中的数据都是响应式的，能够实时保持数据与页面同步。  一般情况下，只有组件之间共享的数据才有必要存储到 Vuex 中，对于组件中的私有数据，依旧存储在组件自身的 data 中即可。具体需求视情况而定
基本使用  安装依赖包 npm install vuex --save 导入 Vuex 包
import Vuex from &#39;vuex&#39; Vue.use(Vuex)  创建 store 对象
const store = new Vuex.Store({ state: { count: 0 } // state 中存放的是全局共享的数据 })  将 store 对象挂载到 Vue 实例中</description>
    </item>
    
    <item>
      <title>冒泡与捕获</title>
      <link>http://www.pigxw.top/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%B8%8E%E6%8D%95%E8%8E%B7/</link>
      <pubDate>Fri, 20 Dec 2019 14:56:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%B8%8E%E6%8D%95%E8%8E%B7/</guid>
      <description>一个popover轮子制作引发的 BUG HTML
&amp;lt;div id=&amp;quot;app&amp;quot; style=&amp;quot;padding-left: 100px;padding-top: 100px;&amp;quot;&amp;gt; &amp;lt;g-popover&amp;gt; &amp;lt;template slot=&amp;quot;content&amp;quot;&amp;gt; &amp;lt;div&amp;gt;popover内容&amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;template&amp;gt; &amp;lt;button&amp;gt;点我&amp;lt;/button&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/g-popover&amp;gt; &amp;lt;/div&amp;gt;  JS
&amp;lt;template&amp;gt; &amp;lt;div class=&amp;quot;popover&amp;quot; @click=&amp;quot;xxx&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;content-wrapper&amp;quot; v-if=&amp;quot;visible&amp;quot;&amp;gt; &amp;lt;slot name=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { name: &amp;quot;GuLuPopover&amp;quot;, data(){ return {visible: false} }, methods:{ xxx(){ this.visible = !this.visible } } } &amp;lt;/script&amp;gt; &amp;lt;style scoped lang=&amp;quot;scss&amp;quot;&amp;gt; .popover{ display: inline-block; vertical-align: top; position: relative;} .content-wrapper{ position: absolute; bottom: 100%; left: 0; border: 1px solid red; box-shadow: 0 0 3px rgba(0,0,0,0.</description>
    </item>
    
    <item>
      <title>Flutter 初识</title>
      <link>http://www.pigxw.top/flutter%E5%88%9D%E8%AF%86/</link>
      <pubDate>Sun, 08 Dec 2019 10:36:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/flutter%E5%88%9D%E8%AF%86/</guid>
      <description>Flutter 官网介绍：
Flutter中文网
Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。
总结：
 跨平台：现在Flutter至少可以跨4种平台，甚至支持嵌入式开发。我们常用的有Linux、Android、IOS，甚至可以在谷歌最新的操作系统上Fuchsia进行运行,经过第三方扩展，甚至可以跑在MacOS和Windows上，到目前为止，Flutter算是支持平台最多的框架了，良好的跨平台性，直接带来的好处就是减少开发成本。
 原生用户界面： 它是原生的，让我们的体验更好，性能更好。用官方的话讲就是平滑而自然的滑动效果和平台感知，为您的用户带来全新的体验。（可以看一下图片，这是Flutter的表现）
 开源免费
  github地址
代表项目： 闲鱼app
安装 安装JAVA环境 选择适合自己机型的版本（64位 or 32位）
JAVA下载地址
安装完成到终端（命令行）里输入java运行，如果出现一大堆命令，则表示安装成功。
下载安装 FlutterSDK  去官网下载Flutter安装包，下载地址
 将安装包zip解压到你想安装Flutter SDK的路径（如： D:\fluter\flutter；注意，不要将flutter安装到需要一些高权限的路径如C:\Program Files)
 在Flutter安装目录的flutter文件下找到flutter_console.bat，双击运行并启动flutter命令行，接下来，你就可以在Flutter命令行运行flutter命令了。
 配置环境变量，在 高级系统设置中找到系统变量中的 Path 点击编辑添加: D:\Flutter\flutter\bin保存。这样就可以在任何地方执行 flutter 命令了。
 在终端中输入flutter doctor,会薄一些错，是因为还要安装 Android studio
  Android Studio的安装  下载地址进入后下拉寻找下载按钮带=点击下载。
 安装Android Studio 软件，几乎就是点next就行了。也可以看此教程： Android Studio 软件安装教程
 打开Android Stuido 软件，然后找到Plugin的配置，搜索Flutter插件，点击 install 安装，安装完后重启 Android Stuido。</description>
    </item>
    
    <item>
      <title>原生 || mpvue 小程序</title>
      <link>http://www.pigxw.top/%E5%8E%9F%E7%94%9F-mpvue-%E5%B0%8F%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 27 Nov 2019 14:56:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/%E5%8E%9F%E7%94%9F-mpvue-%E5%B0%8F%E7%A8%8B%E5%BA%8F/</guid>
      <description>小程序：  无需下载，用完即走（体积小） 同App 互补，可以实现 App 基本功能。 微信扫一扫即可下载。 开发周期短，成本较低。  小程序适配方案： Iphone6：1rpx = 1物理像素 = 0.5px
微信提供的换算方式：
 以Iphone 6 的物理像素个数为标准： 750； 1rpx= 目标设备宽度 / 750 * px; 此时底层已做 viewport 适配处理。  重要文件： 注册小程序：App ()
注册页面：Page ()
app.js ： 入口文件；
app.json ：全局配置文件；
事件：  冒泡事件：事件向父组件冒泡，bind事件绑定不会阻止冒泡事件向上冒泡；
 非冒泡事件：catch 事件绑定可以阻止冒泡事件向上冒泡。
  生命周期函数： onLoad : 做一些初始化工作，发送请求，开启定时器。 onReady : 监听页面初次渲染成功。 onShow : 监听页面显示。 &amp;hellip;
模板（template）  定义： template属性： name（标识模板) 使用：template属性： is(模板的 name) 引入模板结构 引入模板样式 @import &amp;lsquo;路径&amp;rsquo; 传参 : data = &amp;lsquo;{{&amp;hellip;item}}&amp;rsquo;  列表渲染：  wx：for wx:key 为每个个体元素进行标记 遍历的个体： item 遍历的下标 : index  本地缓存 setStorage、getStorage</description>
    </item>
    
    <item>
      <title>node.js 的 Event loop</title>
      <link>http://www.pigxw.top/node.js%E7%9A%84eventloop/</link>
      <pubDate>Sat, 16 Nov 2019 10:36:04 +0900</pubDate>
      
      <guid>http://www.pigxw.top/node.js%E7%9A%84eventloop/</guid>
      <description>node.js node.js做三件事：
 初始化 event loop 执行脚本 运行 event loop  node.js中的 event loop :
timers阶段处理 setTimeout()、setInterval() 中该调的回调函数，到了调用时间就调用，没到时间就进入下一阶段（poll轮询阶段），
图解一.png
一般是停留在poll阶段。poll阶段处理除了timers和check阶段的一切事，比如操作系统返回”文件读完了“poll就去处理文件拿出数据放到对应的回调， 给回调执行。check 阶段只处理setImmediate()
next.Tick()存在时，永远是它先执行。一般情况下是setTimeout()先于setImmediate()执行。
处理机制.png
setTimeout（fn, ）中的函数放在 timers阶段，setImmediate(fn2) 放在check阶段，process.next.Tick(fn3)放在当前阶段的后面。
相关试题：（建议画图做题）
题1.png
题2.png
** 先打印出 script start 、script end 然后是promise1、promise2最后才是setTimeout **
题2输出结果
宏任务与微任务 Chrome中：
setTimeout &amp;mdash;-&amp;gt; 一会儿（宏任务）macroTask promise .then(fn) &amp;mdash;&amp;mdash;&amp;gt; 马上做（微任务）microTask new promise( fn )，这个fn 是马上执行的，不用放到哪个队列里去。
宏任务与微任务.png
resolve 只是决定执行 then 的第一个函数还是第二个函数。resolve 执行第一个任务。 then 的时候就把 then 后面的 f函数 加入 马上做（微任务） 队列中。await 就把它改写成 promise.</description>
    </item>
    
    <item>
      <title>虚拟 DOM</title>
      <link>http://www.pigxw.top/%E8%99%9A%E6%8B%9Fdom/</link>
      <pubDate>Sat, 02 Nov 2019 08:56:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/%E8%99%9A%E6%8B%9Fdom/</guid>
      <description>虚拟DOM 根据真实的 DOM 结构创建一个和真实DOM 一一映射的数据结构来进行操作，操作完再把数据结构的变化反映到真实的DOM 中。
作用：当DOM 结构的改变或操作很细微的时候，使用虚拟DOM 可以避免因微小改变而重新渲染一整个DOM 结构，类似于打补丁。
class VNode { constructor(tag, children, text) { this.tag = tag this.text = text this.children = children } render() { if(this.tag === &#39;#text&#39;) { return document.createTextNode(this.text) } let el = document.createElement(this.tag) this.children.forEach(vChild =&amp;gt; { el.appendChild(vChild.render()) }) return el } } function v(tag, children, text) { if(typeof children === &#39;string&#39;) { text = children children = [] } return new VNode(tag, children, text) } let vNodes = v(&#39;div&#39;, [ v(&#39;p&#39;, [ v(&#39;span&#39;, [ v(&#39;#text&#39;, &#39;QWERTYU&#39;) ] ) ] ), v(&#39;span&#39;, [ v(&#39;#text&#39;, &#39;12345678&#39;) ]) ] ) console.</description>
    </item>
    
    <item>
      <title>BFC</title>
      <link>http://www.pigxw.top/bfc/</link>
      <pubDate>Fri, 25 Oct 2019 21:26:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/bfc/</guid>
      <description>BFC （块级格式化上下文）block formatting context 当子元素 浮动 时，父容器一般是包不住子元素的，所以要给父容器设置BFC，它能保证不管子元素怎么闹腾，都不影响外部。
如何设置？ * 浮动（float 不是 none） * 绝对定位（ position 为 absolute 或fixed） * 内联块（元素具有display: inline-block） * 表格单元格（display:table-cell） * 表格标题（display:table-caption ） * 具有 overflow 且值不是 visible 的元素 * display: flow-root
在BFC 中，盒在竖直方向一个接一个的放置，从包含块的顶部开始，两兄弟之间的竖直margin 会合并
功能1: 爸爸管儿子（但有些元素他就是要出去一部分，包住一部分，那就清除浮动或者加 display： flow-root）
用BFC 包住浮动元素（不是清除浮动）
 &amp;lt;div class =&amp;quot;baba&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;erzi&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; .baba{ border: 10px solid red; display: flow-root; } .erzi{ float: left; height: 100px; width: 200px; border: 5px solid green; }  功能2：兄弟之间划清界限（现在可以用flex 布局）</description>
    </item>
    
    <item>
      <title>移动端的问题</title>
      <link>http://www.pigxw.top/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 15 Oct 2019 21:21:29 +0800</pubDate>
      
      <guid>http://www.pigxw.top/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>300ms延迟问题： 延迟的原因：
Iphone 是无键盘全触屏手机的始祖，当时的网站都是为大屏幕设备所设计的（没有设置），为了便于用户阅读浏览器引入了双击缩放的功能。手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。那如何判断用户快速点击两次呢？假定用户点击后300ms内如果有第二次点击，就认为用户的目的是双击缩放而不是普通的点击页面元素。所以用户第一次点击一个链接后，必须等300ms，浏览器才能决定是否是跳转还是缩放页面。 后来全触屏手机流行后，其他设备浏览器也开始效仿。
如何解决：
方法1、设置 meta&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width&amp;quot;&amp;gt;
经过测试，在android手机只要添加name=viewport的meta即可消除延迟， 在ios上必须设置width=device-width。
其他方法:
fastClick库，或者不用click用touchStart
什么时候使用: 1. 当移动端因为一些原因未使用 的时候使用。 2. 2017年以前使用，现在一般不用。但为了应付面试仍然学习它，因为不少面试官还生活在2017年以前。
如何使用:
 &amp;lt;script src=&amp;quot;https://cdn.bootcss.com/fastclick/1.0.6/fastclick.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; document.addEventListener(&#39;DOMContentLoaded&#39;, function() { FastClick.attach(document.body) }, false)  fastClick 原理: 在检测到touchEnd事件的时候，会通过DOM自定义事件立即出发模拟一个click事件，并把浏览器在300ms之后真正的click事件阻止掉
点击穿透现象： 在移动端，当用户通过绑定touchStart事件监听函数让浮层关闭时，关闭后浮层后面对应位置页面其他元素也被点击，比如浮层的关闭按钮下是一个链接，当用户点击浮层关闭按钮浮层消失后大约300ms页面同时发生跳转。
原因分析： 触屏设备为了区分用户双击缩放，对click做了300ms延迟触发，因此用户在移动端触屏设备的操作流程以及事件触发为：
 手指触摸屏幕到屏幕，触发 touchStart 手指在屏幕短暂停留(如果是移动，触发 touchMove) 手指离开屏幕, 触发 touchEnd 等待约300ms，看用户在此时间内是否再次触摸屏幕。如果没有 300ms后 在用户手指离开的位置触发 click事件  击穿的根源在第4步。当用户用户点击关闭让遮罩隐藏后，浏览器在300ms后在原来用户手指离开的位置触发click事件，此时遮罩不存在了，自然“点击”到后面的元素。
解决方法:
方法1
设置&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;device-width&amp;quot;&amp;gt; 表面上看起来解决了300ms延时，就能解决穿透。实际上这种方法不可行。因为click事件是在touchEnd事件之后，更晚于touchStart（间隔了60~100ms），如果在touchStart 里绑定关闭了浮层，约100ms后 click事件触发的时候仍然会引发问题。
方法2
关闭浮层用click，不用touchStart。 可行。因为浮层关闭监听的是click，当浮层消失后不会再在原来的位置再冒出个click
方法3
浮层关闭的时间延长。可行。当用户触发touchStart关闭浮层时，浮层可以使用渐变消失（可设置浮层关闭动画在300ms以上），此刻click事件在原来的位置触发时点击的还是浮层，而不是浮层后面的链接
方法4</description>
    </item>
    
    <item>
      <title>移动端适配方案</title>
      <link>http://www.pigxw.top/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</link>
      <pubDate>Mon, 14 Oct 2019 11:32:33 +0800</pubDate>
      
      <guid>http://www.pigxw.top/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</guid>
      <description>移动端适配的几种方案： viewport适配 开发流程: 1. 开发者拿到设计稿（假设设计稿尺寸为750px，设计稿的元素标是基于此宽度标注） 2. 开始开发，css以设计稿标注的尺寸来开发，比如页面元素字体标注的大小是32px 4. 在html的head里引入适配代码
简言之：CSS按照设计稿写，加几句动态生成meta标签的JS代码。
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width&amp;quot;&amp;gt; &amp;lt;script&amp;gt; const WIDTH = 750 const mobileAdapter = () =&amp;gt; { let scale = screen.width/WIDTH let content = `width=${WIDTH}, initial-scale=${scale}, maximum-scale=${scale}, minimum-scale=${scale}` let meta = document.querySelector(&#39;meta[name=viewport]&#39;) if(!meta) { meta = document.createElement(&#39;meta&#39;) meta.setAttribute(&#39;name&#39;, &#39;viewport&#39;) document.head.appendChild(meta) } meta.setAttribute(&#39;content&#39;, content) } mobileAdapter() window.onOrientationChange = mobileAdapter &amp;lt;/script&amp;gt;  原理解析：
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=750px,inital-scale=0.5&amp;quot;&amp;gt;  content=750px是设计稿的尺寸。 initial-scale为默认缩放比，它是由设备尺寸/设计稿尺寸决定，不能写死，所以要动态生成。 优点是使用简单，缺点是页面整体缩放，如果页面中有一个1px的边框，经整体缩放，这个1px可能就不见了或者又太大了。
vw适配： 750px=100vw; 1px=0.1333vw; 84px=11.20vw&amp;hellip;&amp;hellip;</description>
    </item>
    
    <item>
      <title>手机专用之动态 rem</title>
      <link>http://www.pigxw.top/%E5%8A%A8%E6%80%81rem/</link>
      <pubDate>Mon, 14 Oct 2019 09:26:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/%E5%8A%A8%E6%80%81rem/</guid>
      <description>手机专用的自适应方案 rem 是什么？
em: 一个 m 的宽度, 一个汉字的宽度 rem: root em 根元素的 font-size 大小
网页上的默认字体大小为 16px chrome 最小的字体大小为 12px
em 是 元素自己的font-size 大小
如： 自己 font-size: 16px; 则 1em = =font-size
 百分比布局虽然可以适应各屏幕大小，但无法设置高度。还有很多其他不确定性
 缩放
动态rem：
 首先： 让html 的font-size 和 页面宽度一样, 即 1rem = 页面宽度 1 rem == html font-size == viewport width 使用 JS 动态调整 REM
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&amp;quot;&amp;gt; &amp;lt;script&amp;gt; var pageWidth = window.</description>
    </item>
    
    <item>
      <title>JS之函数</title>
      <link>http://www.pigxw.top/js%E4%B9%8B%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 08 Oct 2019 19:21:26 +0800</pubDate>
      
      <guid>http://www.pigxw.top/js%E4%B9%8B%E5%87%BD%E6%95%B0/</guid>
      <description>函数 指可以执行代码的对象，和数组一样有不一致性。
三种函数声明方式 function f() { } var f = function f() { }; //注意分号 f = new Function (&#39;x&#39;,&#39;y&#39;,&#39;return x+y&#39;) //只有最后一个参数会被当作函数体，可以不使用new 命令，不推荐使用这种声明方式  注意：如果同一个函数被多次声明，后面的声明会覆盖前面的声明。也就是说起前面的声明会失效。
函数名的提升 JS引擎将函数名视同变量名，使用function 声明函数时，整个函数会像变量声明一样被提升到代码头部。如果同时使用function命令和赋值语句声明同一个函数，最后总是采用赋值语句的定义
var f = function () { console.log(&#39;1&#39;); } function f() { console.log(&#39;2&#39;); } f() // 1  函数的属性和方法  name : f.name返回函数的名字，如果通过变量赋值定义的匿名函数则返回变量名。具名函数返回function关键字后的函数名。
var f3 = function myName() {}; f3.name // &#39;myName&#39;   上面代码中，f3.name返回函数表达式的名字。注意，真正的函数名还是f3，而myName这个名字只在函数体内部可用。 用处：可用来获取参数函数的名字。
 length: f.length 返回函数预期传入的参数个数。
 toString: 返回一个字符串，内容是函数源码。</description>
    </item>
    
    <item>
      <title>JS 模拟继承</title>
      <link>http://www.pigxw.top/js%E6%A8%A1%E6%8B%9F%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Fri, 04 Oct 2019 19:17:26 +0800</pubDate>
      
      <guid>http://www.pigxw.top/js%E6%A8%A1%E6%8B%9F%E7%BB%A7%E6%89%BF/</guid>
      <description>JS 模拟继承 何为继承？ 继承：面向对象编程中的一个概念，是类和类之间的一种关系（在2015年前JS中是没有类的，所以就是函数与函数之间的关系），继承可以使子类具有父类的各种属性和方法。
JS 的 Window 下有对象（Object()）、数组（Array()）、函数（Function()）三个函数，这三个函数都有一个 prototype 属性,如 Object.prototype、Array.prototype ,虽然 Object.prototype 和Array.prototype 没有直接的关系，但因为对象都是由new Object()new 出来的，所以存在一个间接关系就是Array.prototype.__proto__ === Object.prototype,继承在 JS 中可以理解为原型链继承。
何为类？ 能产生对象的东西即为类。
 定义一个类的一种方法是使用一个类声明。要声明一个类，使用带有class关键字的类名;
 一个类表达式是定义一个类的另一种方式。类表达式可以是被命名的或匿名的。赋予一个命名类表达式的名称是类的主体的本地名称。
 constructor 方法是一个特殊的方法，这种方法用于创建和初始化一个由 class 创建的对象。一个类只能拥有一个名为 “constructor”的特殊方法。
 如果类包含多个constructor的方法，则将抛出 一个SyntaxError
 一个构造函数可以使用 super 关键字来调用一个父类的构造函数。
 函数声明和类声明之间的一个重要区别是函数声明会提升，类声明不会。
  var person = new Human()中的person就是一个对象，所以Human()便是一个类。 但是父类Object（）到子类Human（）是一个自带的继承。
ES5写继承： function Human(name){ //父类 Human() this.name = name //自有属性name } Human.prototype.run = function(){ //共有属性为run console.log(&amp;quot;我叫&amp;quot;+this.name&amp;quot;,我有run的属性&amp;quot;) return undefined } function Man(name){ //声明 Man() Human.</description>
    </item>
    
    <item>
      <title>HTTP之Cookie、Cache-control、Session</title>
      <link>http://www.pigxw.top/cookiecache-controlsession/</link>
      <pubDate>Thu, 26 Sep 2019 11:17:26 +0800</pubDate>
      
      <guid>http://www.pigxw.top/cookiecache-controlsession/</guid>
      <description>HTTP请求与响应
前言： URI : 统一资源标识符,一个URI 可能包含 协议、登录信息、服务器地址、服务器端口、带层次的文件路径、查询参数等 URL : 统一资源定位符，是URI 的子集。
HTTP 协议是无状态协议，即HTTP 协议自身不会对请求和响应之间的通信状态进行保存。以确保协议的可伸缩性。 HTTP/1.1 虽然是无状态协议，但为了实现保持状态功能，于是就引入了 Cookie 技术用来管理状态。
Cookie Cookie 是什么？  Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据。 浏览器需要保存这段数据，不得轻易删除。 此后每次浏览器访问该服务器，都必须带上这段数据。  Cookie特点：  服务器通过 Set-Cookie 头设给客户端一串字符串 浏览器（客户端）得到Cookie 之后，每次访问相同域名的网页时都要带上这段字符串 服务器读取Cookie就知道登录用户的信息。客户端要在一段时间内保存这个Cookie。  cookie可以被用户更改，所以要使用session来阻止用户更改。
什么是Session? 服务器通过Cookie给用户一个session id,session id对应服务器里面的一小块内存，每次用户访问服务器时，服务器通过session id去读取对应的session就知道用户的隐私信息了。
Session是基于Cookie实现的，反过来说，cookie是session的基石。
cookie和localStorage的区别：  localStorage和http无关，不会被带到服务器上，cookie每次请求的时候会被浏览器带到服务器上；
 localStorage最大存储量为5Mb左右,cookie为4k左右。
  localStorage和sessionStorage的区别： r * sessionStorage在用户关闭页面后就失效（会话结束后），localStorage永久有效。
 cookie默认在用户关闭页面后就失效，后台代码可以任意设置Cookie的失效期限。  Cache-control 你想要哪个请求被缓存，就给一个Cache-Control
response.setHeader(&#39;Cache-Control&#39;,&#39;max-age=30&#39;)//30秒内请求时返回的是内存给你的
但是首页不能设置Cache-Control,如果首页都缓存了，用户在缓存时间内无法获得最新内容。
Cache-Control可以让浏览器在一段时间内不访问浏览器，直接用本地的内存或硬盘作为响应，可以极快的请求到资源。 如果要更新，只要在入口（html）文件里把URL变一下，跟以前的所有URL不一样就不会使用缓存，会把最新版的缓存下来，如果又过时了，再改一下就可以了。 #### Expires和Cache-Control的区别：
 Cache-Control是多长时间过期，Expires是什么时候过期，也就是设置的时候，C是设置时长，E设置时间点。   #### cache-control与Etag: 设置了Cache-Control直接不请求,Etag会请求但如果MD5一样就不会下载。</description>
    </item>
    
    <item>
      <title>web性能优化</title>
      <link>http://www.pigxw.top/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 22 Sep 2019 19:17:26 +0800</pubDate>
      
      <guid>http://www.pigxw.top/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>web性能优化：（从理论上来讲） 目的： 让用户访问网页时以最快的速度获取网页内容。
先思考一个问题： 地址栏输入url到按下回车后这一过程中有哪些前端相关的内容？
 看有没有缓存 DNS 查询 建立 TCP 连接（后端） 发送 HTTP 请求,后台处理 接收响应 接收完成得到一个 html 判断文本类型，DOCTYPE,html/xml ？ 浏览器逐行解析 html 看到html标签，Chrome 会先等 CSS 加载完再渲染到页面 看到 CSS，下载 CSS，如果有多个 CSS 便同时下载(Chrome8个)。CSS 并行下载，串行解析。 看 JS，下载并行，串行解析。在 Chrome 中，CSS 会阻塞 HTM 渲染，IE 不会。JS 一定会阻塞 HTML 渲染（不管什么浏览器）。  跟前端无关的优化：  优化DNS查询：减少DNS查询（减少域名数量）。
 TCP连接复用（keep-alive）http/2.0多路复用。
  前端优化：  发送http请求：   减少 cookie 体积（减少请求）；合并文件。
 使用 cache-control（干掉请求）；有缓存就不需要请求了，直接本地响应。
 同时发多个请求。如 IE 中一个域名能发4个请求，但我可以使用两个域名或多个。于是与上面的DNS查询优化有矛盾，但是经过权衡之后，文件少的时候，就减少域名使用。文件多时，增加DNS查询时间，但减少了请求时间（用户带宽足够前提下）。
   接收响应：   使用 ETag ，如果请求时带上服务器给的 ETag 时，服务器便不再响应新的内容，返回304,表示 not modifiled ,未修改；</description>
    </item>
    
    <item>
      <title>vue 指令事件</title>
      <link>http://www.pigxw.top/vue-%E6%8C%87%E4%BB%A4%E5%92%8C%E4%BA%8B%E4%BB%B6%E7%AD%89/</link>
      <pubDate>Wed, 18 Sep 2019 16:26:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/vue-%E6%8C%87%E4%BB%A4%E5%92%8C%E4%BA%8B%E4%BB%B6%E7%AD%89/</guid>
      <description>过滤器 Vue.js支持在 {{}} 插值的尾部添加一小管道符 &amp;ldquo;|&amp;rdquo; 对数据进行过滤，经常用于格式化文本，比如字母全部大写、货币千位使用逗号分隔等。过滤的规则是自定义的,通过给 Vue 实例添加选项 filters 来设置过滤器： {{ data | filter1 |filter2}} {{date | formatDate(66,99)}}中的第一个和第二个参数，分别对应过滤器的第二个和第三个参数
指令和事件 指令（Directives）是 Vue 模板中最常用的一项功能，它带有前缀 v-，能帮我们快速完成DOM操作。循环渲染。显示和隐藏。
 v-­text:解析文本 和{{ }} 作用一样
 v­-html:解析html
 v-­bind: v­bind 的基本用途是动态更新 HTML 元素上的属性，比如 id、class 等
 v-­on: 它用来绑定事件监听器
v­-on具体介绍 在普通元素上，v-­on可以监听原生的 DOM 事件，除了 click 外，还有dblclick、 keyup, mousemove 等。表达式可以是一个方法名，这些方法都写在 Vue 实例的 methods 属性内，并且是函数的形式，函数内的 this 指向的是当前 Vue 实例本身，因此可以直接使用 this.xxx形式来访问或修改数据
 vue中用到的所有方法都定义在methods中
  语法糖  语法糖是指在不影响功能的情况下，添加某种简洁方法实现同样的效果，从而更加方便程序开发。 v-bind ——&amp;gt; : (冒号) v-on ——&amp;gt; @  实例 &amp;lt;!</description>
    </item>
    
    <item>
      <title>计算属性和方法</title>
      <link>http://www.pigxw.top/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 18 Sep 2019 11:26:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</guid>
      <description>计算属性 通过一个实例引入计算属性 需求：将字符串123，456，789翻转变成789，456，123 方法一：通过模块内表达式实现
&amp;lt;div id=&amp;quot;demo1&amp;quot;&amp;gt; {{ text }} {{ text.split(&#39;,&#39;).reverse().join(&#39;,&#39;) }} &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: &#39;#demo1&#39;, data:{ text: &#39;123,456,789&#39; } }) &amp;lt;/script&amp;gt;  方法二：通过计算属性实现
&amp;lt;div id=&amp;quot;demo2&amp;quot;&amp;gt; {{text}} {{reverseText}} &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: &#39;#demo1&#39;, data:{ text: &#39;123,456,789&#39; }, computed:{ reverseText:function(){ return this.text.split(&#39;,&#39;).reverse().join(&#39;,&#39;) } } }) &amp;lt;/script&amp;gt;  由此可以看出：
 模块内表达式非常便利，但只能用于简单的运算，在模块中放入太多逻辑会使模块臃肿难以维护； 计算属性也可以实现，并且可以处理复杂逻辑。  方法（methods）  计算缓存、 Methods，两者的区别： 只要发生重新渲染，methods 调用总会执行指定函数。但是计算属性却不一定，它是依赖缓存的。
&amp;lt;div id =&amp;quot;date&amp;quot;&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>vue-router、axios、vuex</title>
      <link>http://www.pigxw.top/vue-routeraxiosvuex/</link>
      <pubDate>Tue, 17 Sep 2019 20:30:30 +0900</pubDate>
      
      <guid>http://www.pigxw.top/vue-routeraxiosvuex/</guid>
      <description>vue-router 路由的基本加载  安装 npm install --save vue-router 2.引用
在router 的 index.js 中 import router from &#39;vue-router&#39; Vue.use(router)  配置路由文件，并在vue实例中注入
var rt = new router({ routes:[{ path:&#39;/&#39;, //指定要跳转的路径 component: HelloWorld //指定要跳转的组件 }] }) new Vue({ el: &#39;#app&#39;, router, components: { App }, template: &#39;&#39; })  确定试图加载的位置
&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;  路由的跳转  &amp;lt;template&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;router-link to=&amp;quot;/helloearth&amp;quot;&amp;gt;HELLO EARTH 33&amp;lt;/router-link&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;router-link to=&amp;quot;/helloworld&amp;quot;&amp;gt;HELLO WORLD 22&amp;lt;/router-link&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/template&amp;gt;   路由参数传递  必须在路由内加入路由的name .</description>
    </item>
    
    <item>
      <title>vue自定义指令</title>
      <link>http://www.pigxw.top/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Mon, 16 Sep 2019 20:30:30 +0900</pubDate>
      
      <guid>http://www.pigxw.top/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</guid>
      <description>自定义指令 自定义指令的基本用法 和组件类似分全局注册和局部注册，区别就是把component换成了derective
需求：自动获取焦点 &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; 获取焦点：&amp;lt;input type=&amp;quot;text&amp;quot; v-focus&amp;gt;&amp;lt;br&amp;gt; 未加自定义指令v-focus：&amp;lt;br&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; Vue.directive(&#39;focus&#39;,{ inserted:function(el){ //el：指令所绑定的元素可以用来直接操作DOM el.focus(); } }); var app = new Vue({ el:&#39;#app&#39;, data:{ } }) &amp;lt;/script  钩子函数 指令定义函数提供了几个钩子函数（可选）：
 bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。
 inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document中）
 update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。
 componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。
 unbind: 只调用一次， 指令与元素解绑时调用。
  钩子函数的参数有：  el: 指令所绑定的元素，可以用来直接操作 DOM 。
 binding: 一个对象，包含以下属性： ——–name: 指令名，不包括 v­ 前缀。 ——–value: 指令的绑定值， 例如： v­my­directive=”1 + 1”, value 的值是 2。 ——–oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无 论值是否改变都可用。 ——–expression: 绑定值的字符串形式。 例如 v­my­directive=”1 + 1” ， expression 的值是 “1 + 1”。 ——–arg: 传给指令的参数。例如 v­my­directive:foo， arg 的值是 “foo”。 ——–modifiers: 一个包含修饰符的对象。 例如： v­my­directive.</description>
    </item>
    
    <item>
      <title>vue组件详解二</title>
      <link>http://www.pigxw.top/vue%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E7%BB%AD/</link>
      <pubDate>Sun, 15 Sep 2019 16:30:30 +0800</pubDate>
      
      <guid>http://www.pigxw.top/vue%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E7%BB%AD/</guid>
      <description>组件（二） 七、插槽slot  插槽：为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 内容分发。Vue.js 实现了一个内容分发 API，使用特殊的 ‘slot’ 元素作为原始内容的插槽。 编译的作用域：假定模板为：
&amp;lt;child-component&amp;gt; {{ message }} &amp;lt;/child-component&amp;gt;  message 应该绑定到父组件的数据，还是绑定到子组件的数据？答案是父组件。组件作用域简单地说是： 父组件模板的内容在父组件作用域内编译； 子组件模板的内容在子组件作用域内编译。 插槽的用法：父组件的内容与子组件相混合，从而弥补了视图的不足。 混合父组件的内容与子组件自己的模板
 单个插槽：
&amp;lt;div id=&amp;quot;app&amp;quot; &amp;gt; &amp;lt;my-component&amp;gt; &amp;lt;p&amp;gt;我是父组件的内容&amp;lt;/p&amp;gt; &amp;lt;/my-component&amp;gt; &amp;lt;/div&amp;gt; Vue.component(&#39;my-component&#39;,{ template:&#39;&amp;lt;div&amp;gt;\ &amp;lt;slot&amp;gt;\ 如果父组件没有插入内容，我就作为默认出现\ &amp;lt;/slot&amp;gt;\ &amp;lt;/div&amp;gt;&#39; })  具名插槽：
&amp;lt;name-component&amp;gt; &amp;lt;h3 slot=&amp;quot;header&amp;quot;&amp;gt;我是标题&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;我是正文内容&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;正文内容有两段&amp;lt;/p&amp;gt; &amp;lt;p slot=&amp;quot;footer&amp;quot;&amp;gt;我是底部信息&amp;lt;/p&amp;gt; &amp;lt;/name-component&amp;gt; Vue.component(&#39;name-component&#39;,{ template:&#39;&amp;lt;div&amp;gt;\ &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;\n&#39; + &#39;&amp;lt;slot name=&amp;quot;header&amp;quot;&amp;gt;\n&#39; + &#39; \n&#39; + &#39; &amp;lt;/slot&amp;gt;\n&#39; + &#39;&amp;lt;/div&amp;gt;\n&#39; + &#39;&amp;lt;div class=&amp;quot;contatiner&amp;quot;&amp;gt;\n&#39; + &#39; &amp;lt;slot&amp;gt;\n&#39; + &#39; \n&#39; + &#39; &amp;lt;/slot&amp;gt;\n&#39; + &#39;&amp;lt;/div&amp;gt;\n&#39; + &#39;&amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;\n&#39; + &#39; &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt;\n&#39; + &#39;\n&#39; + &#39; &amp;lt;/slot&amp;gt; \n&#39; + &#39;&amp;lt;/div&amp;gt;&#39;+ &#39; &amp;lt;/div&amp;gt;&#39; })  作用域插槽：作用域插槽是一种特殊的slot，使用一个可以复用的模板来替换已经渲染的元素——从子组件获取数据===template模板是不会被渲染的</description>
    </item>
    
    <item>
      <title>vue组件详解一</title>
      <link>http://www.pigxw.top/vue%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 15 Sep 2019 15:30:30 +0800</pubDate>
      
      <guid>http://www.pigxw.top/vue%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>组件（一） 一、组件的作用 组件的作用：提高代码的复用性。
二、组件的使用方法 1.全局注册组件：
全局注册： &amp;lt;html&amp;gt; &amp;lt;my-component&amp;gt;&amp;lt;/my-component&amp;gt; &amp;lt;/html&amp;gt; &amp;lt;script&amp;gt; Vue.component(&#39;my-component&#39;,{ template:&#39;&amp;lt;div&amp;gt;这是全局注册的组件&amp;lt;/div&amp;gt;&#39; }) &amp;lt;/script&amp;gt;  2.局部注册组件：
&amp;lt;html&amp;gt; &amp;lt;app-component&amp;gt;&amp;lt;/app-component&amp;gt; &amp;lt;/html&amp;gt; 在vue实例中定义组件 &amp;lt;script&amp;gt; var app = new Vue({ el:&#39;#app&#39;, components:{ &#39;app-component&#39;:{ template:&#39;&amp;lt;div&amp;gt;这是局部注册的组件&amp;lt;/div&amp;gt;&#39; } } }) &amp;lt;/script&amp;gt;  两种注册方式的优缺点： 全局注册：优点是所有的vue实例都可以使用；缺点是权限太大，容错率低。 局部注册：只能在所注册的vue实例中使用。 注意事项： 1. html标签受限：Vue组件模板在某些情况下回受到html标签的限制，如table标签内只能有tr、td、tbody这些元素,如果把组件名挂载到table内,实际内容是不会被渲染到table标签中的，会把组件内容踢出去。 此时需要 is 属性来挂载组件名，is=&#39;组件名&#39;
&amp;lt;table&amp;gt; &amp;lt;tbody is = &#39;app-component&#39;&amp;gt;&amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt;   组件名使用小写字母或小写字母加 - 来命名； template中的内容必须被一个DOM元素包裹，可以嵌套； 在组件定义中，除了template之外的其他选项:data,omputed,methods 组件中，data必须是一个方法。  三、使用props传递数据 在子组件中使用props接收来自父组件的数据，在props中定义的属性，都可以在组件中直接使用； 子组件中的props来自父组件，子组件中的data return的是组件自己的数据；props中定义的和data返回的，其作用域都是组件本身，可以在template,methods,computed中直接使用。
&amp;lt;div id=&amp;quot;app&amp;quot; style=&amp;quot;border:1px solid red;height: 350px;&amp;quot;&amp;gt; &amp;lt;h5 style=&amp;quot;text-align: center&amp;quot;&amp;gt;父组件&amp;lt;/h5&amp;gt; &amp;lt;child-component msg=&amp;quot;这是来自父组件的内容&amp;quot;&amp;gt;&amp;lt;/child-component&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>vue基础之实例与数据绑定</title>
      <link>http://www.pigxw.top/vue%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Sat, 14 Sep 2019 15:30:30 +0800</pubDate>
      
      <guid>http://www.pigxw.top/vue%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>vue实例和数据绑定  cdn引入vue.js：&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 通过构造函数 Vue 就可以创建一个 Vue 的根实例，并启动 Vue 应用&amp;mdash;入口
var app ＝new Vue({ el:&#39;&#39;, data:{ } })  必不可少的一个选项就是 el 。 el 用于指定一个页面中己存在的 DOM 元素来挂载 Vue实例,可以是标签。也可以是css语法。
 通过 Vue 实例的 data 选项，可以声明应用内需要双向绑定的数据。建议所有会用到的数据都预先在 data 内 声明，这样不至于将数据散落在业务逻辑中，难以维护。也可以指向一个已经有的变量。
 挂载成功后，我们可以通过 app.$el 来访问该元素。Vue 提供了很多常用的实例属性与方法，都以 el,app. &amp;mdash;访问data元素的属性&amp;mdash; 直接app.属性名，app.msg
  生命周期钩子 created: * 实例创建完成后调用，此阶段完成了数据的观测等，但尚未挂载， $el 还不可用； * 需要初始化处理一些数据时会比较有用.&amp;mdash;-还未挂载； mounted el: * 挂载到实例上后调用，一般我们的第一个业务逻辑会在这里开始； * 相当于 $(document).ready()&amp;mdash;刚刚挂载； beforeDestroy: * 实例销毁之前调用； * 主要解绑一些使用 addEventListener 监听的事件等。</description>
    </item>
    
    <item>
      <title>JSONP</title>
      <link>http://www.pigxw.top/jsonp/</link>
      <pubDate>Tue, 10 Sep 2019 11:26:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/jsonp/</guid>
      <description>JSONP JSONP是什么:
当浏览器不支持CORS跨域（IE不支持）时，必须通过其他方法进行跨域，通过请求 JS 文件，JS文件执行一个回调，回调里有我们请求的数据。回调函数名是可以随意设置的随机数， 创建script 请求js ，js 把数据夹带过来，然后就可以拿到js 数据了。
优点：支持IE 、可以跨域; 缺点：script标签读不到AJAX 的精准状态，也就是读不到状态码是什么，只知道成功或失败。
script 请求只能发get 请求,所以JSONP不能发post 请求.
JSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。
它的基本思想是，网页通过添加一个script元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。
如何向服务器发请求？  用 form 可以发请求，但是会刷新页面或新开页面
 用 a 可以发 get 请求，但是也会刷新页面或新开页面
 用 img 可以发 get 请求，但是只能以图片的形式展示
 用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示
 用 script 可以发 get 请求，但是只能以脚本的形式运行
  其中，通过动态创建 script 并添加 callback 查询参数来发 get 请求的就是 JSONP &amp;gt;请求方：frank.com 的前端程序员（浏览器） &amp;gt;响应方：jack.com 的后端程序员（服务器） &amp;gt; 1.请求方创建 script，src 指向响应方，同时传一个查询参数 ?</description>
    </item>
    
    <item>
      <title>JS函数</title>
      <link>http://www.pigxw.top/js%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 08 Sep 2019 23:01:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/js%E5%87%BD%E6%95%B0/</guid>
      <description>函数 指可以执行代码的对象，和数组一样有不一致性。
三种函数声明方式  function f() { }
 var f = function f() { }; //注意分号
 f = new Function (&amp;lsquo;x&amp;rsquo;,&amp;lsquo;y&amp;rsquo;,&amp;lsquo;return x+y&amp;rsquo;) //只有最后一个参数会被当作函数体，可以不使用new 命令，不推荐使用这种声明方式
  注意：如果同一个函数被多次声明，后面的声明会覆盖前面的声明。也就是说起前面的声明会失效。
函数名的提升
JS引擎将函数名视同变量名，使用function 声明函数时，整个函数回想变量声明一样被提升到代码头部。如果同时使用function命令和赋值语句声明同一个函数，左后总是采用赋值语句的定义
var f = function () { console.log(&#39;1&#39;); } function f() { console.log(&#39;2&#39;); } f() // 1  函数的属性和方法
 name :f.name返回函数的名字，如果通过变量赋值定义的匿名函数则返回变量名。具名函数返回function关键字后的函数名。 var f3 = function myName() {}; f3.name // &#39;myName&#39;  上面代码中，f3.name返回函数表达式的名字。注意，真正的函数名还是f3，而myName这个名字只在函数体内部可用。
  用处：可用来获取参数函数的名字。
 length: f.</description>
    </item>
    
    <item>
      <title>如何使用 hugo 搭建个人博客</title>
      <link>http://www.pigxw.top/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 06 Sep 2019 19:17:26 +0800</pubDate>
      
      <guid>http://www.pigxw.top/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>本文默认大家都会在github上部署自己的博客，在此基础上，阐述如何使用hugo搭建一个自己的博客平台，hugo是用go语言实现的一个博客生成器。用它不需要有多好的基础，照着抄代码就行。本文于官方教程的区别是，详细，够详细！基本能避免实现过程中的一些暗坑。
第一步  下载 hugo 安装包，解压到 D 盘 Software 目录下，（随便你解压到哪，只不过，后面配置环境变量添加 PATH 时记得把你所解压到的文件地址加上就行了），设置环境变量，在 PATH 中添加 D:\Software\hugo,(一定要有 hugo )。到此，之后都不用管这个安装包以及 hugo.exe 了。
 下载地址一般到官网 hugo下载 选择你需要的版本。
 搞定之后可以打开命令行工具运行
hugo version  来检查你是否下载安装成功，如果执行上面命令后显示 hugo 的版本号及一些事件日期信息，则代表成功。
  第二步  进入官网 hugo 官网，点击 Quick Start 你便可得到一份官方的指南，指南上的第一步上面已经做完了。 接下来可以按照它的提示照抄代码在你的终端运行。 进入 D 盘创建一个博客站点的存放文件如 codes ,
cd codes hugo new site quickstart  //此处的 quickstart 必须更换为你的 github 用户名.github.io-creator (比如我的是 wuxiaod.github.io-creator,其中 -creator 代表创建的只是一个生成器，具体为何，后面会讲，其实就是一个备份)
 运行成功后会在 codes 里面生成一个 wuxiaod.github.io-creator 的文件夹，里面有几个初始目录文件如 content、themes 等。</description>
    </item>
    
    <item>
      <title>Sass、Scss入门</title>
      <link>http://www.pigxw.top/sassscss-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 26 Aug 2019 11:26:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/sassscss-%E5%85%A5%E9%97%A8/</guid>
      <description>Scss入门：  Sass（英文全称：Syntactically Awesome Stylesheets）是一个最初由Hampton Catlin设计并由Natalie Weizenbaum开发的类 CSS 语言。 发行时间：2007年；稳定版本：2016年3月28日； Sass 十分简洁，语法中几乎不含括号。 后来前端工程师表示不含括号看不懂，于是 Sass 的开发者又提供了 Scss，含括号。 弱弱的前端工程师终于表示能看懂了。Sass的官方解释器是开源的并且用Ruby语言写成，但是也有用PHP、C语言、Java等实现的版本（C语言版本叫做llibSass，Java语言版本叫做JSass）。SassScript提供以下功能：变量、嵌套、混入（Mixin）、选择器继承等。
 安装 parcel, 下面这条命令会自动安装node.sass
npm i -D parcel
运行：
npx parcel index.html
实例：
HTML
 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;zh&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;title&amp;gt;scss&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./a.scss&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;一起学 Scss 吧&amp;lt;/h1&amp;gt; &amp;lt;div class=&amp;quot;nav1&amp;quot;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;nav2&amp;quot;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;demo&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  SCSS：</description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://www.pigxw.top/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Thu, 15 Aug 2019 18:32:04 +0800</pubDate>
      
      <guid>http://www.pigxw.top/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>hello everyone nice to meet you !::::)))))</description>
    </item>
    
  </channel>
</rss>