<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>吴潇的个人博客</title>
    <link>http://example.org/</link>
    <description>Recent content on 吴潇的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 09 Oct 2019 15:30:30 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vue组件详解</title>
      <link>http://example.org/posts/vue%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E7%BB%AD/</link>
      <pubDate>Wed, 09 Oct 2019 15:30:30 +0800</pubDate>
      
      <guid>http://example.org/posts/vue%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E7%BB%AD/</guid>
      <description>组件（二） 七、插槽slot  插槽：为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 内容分发。Vue.js 实现了一个内容分发 API，使用特殊的 ‘slot’ 元素作为原始内容的插槽。 编译的作用域：假定模板为：
&amp;lt;child-component&amp;gt; {{ message }} &amp;lt;/child-component&amp;gt;  message 应该绑定到父组件的数据，还是绑定到子组件的数据？答案是父组件。组件作用域简单地说是： 父组件模板的内容在父组件作用域内编译； 子组件模板的内容在子组件作用域内编译。 插槽的用法：父组件的内容与子组件相混合，从而弥补了视图的不足。 混合父组件的内容与子组件自己的模板
 单个插槽：
&amp;lt;div id=&amp;quot;app&amp;quot; &amp;gt; &amp;lt;my-component&amp;gt; &amp;lt;p&amp;gt;我是父组件的内容&amp;lt;/p&amp;gt; &amp;lt;/my-component&amp;gt; &amp;lt;/div&amp;gt; Vue.component(&#39;my-component&#39;,{ template:&#39;&amp;lt;div&amp;gt;\ &amp;lt;slot&amp;gt;\ 如果父组件没有插入内容，我就作为默认出现\ &amp;lt;/slot&amp;gt;\ &amp;lt;/div&amp;gt;&#39; })  具名插槽：
&amp;lt;name-component&amp;gt; &amp;lt;h3 slot=&amp;quot;header&amp;quot;&amp;gt;我是标题&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;我是正文内容&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;正文内容有两段&amp;lt;/p&amp;gt; &amp;lt;p slot=&amp;quot;footer&amp;quot;&amp;gt;我是底部信息&amp;lt;/p&amp;gt; &amp;lt;/name-component&amp;gt; Vue.component(&#39;name-component&#39;,{ template:&#39;&amp;lt;div&amp;gt;\ &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;\n&#39; + &#39;&amp;lt;slot name=&amp;quot;header&amp;quot;&amp;gt;\n&#39; + &#39; \n&#39; + &#39; &amp;lt;/slot&amp;gt;\n&#39; + &#39;&amp;lt;/div&amp;gt;\n&#39; + &#39;&amp;lt;div class=&amp;quot;contatiner&amp;quot;&amp;gt;\n&#39; + &#39; &amp;lt;slot&amp;gt;\n&#39; + &#39; \n&#39; + &#39; &amp;lt;/slot&amp;gt;\n&#39; + &#39;&amp;lt;/div&amp;gt;\n&#39; + &#39;&amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;\n&#39; + &#39; &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt;\n&#39; + &#39;\n&#39; + &#39; &amp;lt;/slot&amp;gt; \n&#39; + &#39;&amp;lt;/div&amp;gt;&#39;+ &#39; &amp;lt;/div&amp;gt;&#39; })  作用域插槽：作用域插槽是一种特殊的slot，使用一个可以复用的模板来替换已经渲染的元素——从子组件获取数据===template模板是不会被渲染的</description>
    </item>
    
    <item>
      <title>vue组件详解</title>
      <link>http://example.org/posts/vue%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 08 Oct 2019 15:30:30 +0800</pubDate>
      
      <guid>http://example.org/posts/vue%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>组件（一） 一、组件的作用 组件的作用：提高代码的复用性。
二、组件的使用方法 1.全局注册组件：
全局注册： &amp;lt;html&amp;gt; &amp;lt;my-component&amp;gt;&amp;lt;/my-component&amp;gt; &amp;lt;/html&amp;gt; &amp;lt;script&amp;gt; Vue.component(&#39;my-component&#39;,{ template:&#39;&amp;lt;div&amp;gt;这是全局注册的组件&amp;lt;/div&amp;gt;&#39; }) &amp;lt;/script&amp;gt;  2.局部注册组件：
&amp;lt;html&amp;gt; &amp;lt;app-component&amp;gt;&amp;lt;/app-component&amp;gt; &amp;lt;/html&amp;gt; 在vue实例中定义组件 &amp;lt;script&amp;gt; var app = new Vue({ el:&#39;#app&#39;, components:{ &#39;app-component&#39;:{ template:&#39;&amp;lt;div&amp;gt;这是局部注册的组件&amp;lt;/div&amp;gt;&#39; } } }) &amp;lt;/script&amp;gt;  两种注册方式的优缺点： 全局注册：优点是所有的vue实例都可以使用；缺点是权限太大，容错率低。 局部注册：只能在所注册的vue实例中使用。 注意事项： 1. html标签受限：Vue组件模板在某些情况下回受到html标签的限制，如table标签内只能有tr、td、tbody这些元素,如果把组件名挂载到table内,实际内容是不会被渲染到table标签中的，会把组件内容踢出去。 此时需要 is 属性来挂载组件名，is=&#39;组件名&#39;
&amp;lt;table&amp;gt; &amp;lt;tbody is = &#39;app-component&#39;&amp;gt;&amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt;   组件名使用小写字母或小写字母加 - 来命名； template中的内容必须被一个DOM元素包裹，可以嵌套； 在组件定义中，除了template之外的其他选项:data,omputed,methods 组件中，data必须是一个方法。  三、使用props传递数据 在子组件中使用props接收来自父组件的数据，在props中定义的属性，都可以在组件中直接使用； 子组件中的props来自父组件，子组件中的data return的是组件自己的数据；props中定义的和data返回的，其作用域都是组件本身，可以在template,methods,computed中直接使用。
&amp;lt;div id=&amp;quot;app&amp;quot; style=&amp;quot;border:1px solid red;height: 350px;&amp;quot;&amp;gt; &amp;lt;h5 style=&amp;quot;text-align: center&amp;quot;&amp;gt;父组件&amp;lt;/h5&amp;gt; &amp;lt;child-component msg=&amp;quot;这是来自父组件的内容&amp;quot;&amp;gt;&amp;lt;/child-component&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>JS函数</title>
      <link>http://example.org/posts/js%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 28 Sep 2019 23:01:04 +0800</pubDate>
      
      <guid>http://example.org/posts/js%E5%87%BD%E6%95%B0/</guid>
      <description>###函数 指可以执行代码的对象，和数组一样有不一致性。 #####三种函数声明方式
 function f() { }
 var f = function f() { }; //注意分号
 f = new Function (&amp;lsquo;x&amp;rsquo;,&amp;lsquo;y&amp;rsquo;,&amp;lsquo;return x+y&amp;rsquo;) //只有最后一个参数会被当作函数体，可以不使用new 命令，不推荐使用这种声明方式
  注意：如果同一个函数被多次声明，后面的声明会覆盖前面的声明。也就是说起前面的声明会失效。
函数名的提升
JS引擎将函数名视同变量名，使用function 声明函数时，整个函数回想变量声明一样被提升到代码头部。如果同时使用function命令和赋值语句声明同一个函数，左后总是采用赋值语句的定义
var f = function () { console.log(&#39;1&#39;); } function f() { console.log(&#39;2&#39;); } f() // 1  函数的属性和方法
 name :f.name返回函数的名字，如果通过变量赋值定义的匿名函数则返回变量名。具名函数返回function关键字后的函数名。 var f3 = function myName() {}; f3.name // &#39;myName&#39;  上面代码中，f3.name返回函数表达式的名字。注意，真正的函数名还是f3，而myName这个名字只在函数体内部可用。
  用处：可用来获取参数函数的名字。
 length: f.length 返回函数预期传入的参数个数。</description>
    </item>
    
    <item>
      <title>JSONP</title>
      <link>http://example.org/posts/jsonp/</link>
      <pubDate>Fri, 27 Sep 2019 11:26:04 +0800</pubDate>
      
      <guid>http://example.org/posts/jsonp/</guid>
      <description>JSONP JSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。
它的基本思想是，网页通过添加一个script元素，向服务器请求 JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。
###如何向服务器发请求？
 用 form 可以发请求，但是会刷新页面或新开页面
 用 a 可以发 get 请求，但是也会刷新页面或新开页面
 用 img 可以发 get 请求，但是只能以图片的形式展示
 用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示
 用 script 可以发 get 请求，但是只能以脚本的形式运行
  其中，通过动态创建 script 并添加 callback 查询参数来发 get 请求的就是 JSONP &amp;gt;请求方：frank.com 的前端程序员（浏览器） &amp;gt;响应方：jack.com 的后端程序员（服务器） &amp;gt; 1.请求方创建 script，src 指向响应方，同时传一个查询参数 ?callbackName=yyy &amp;gt; 2.响应方根据查询参数callbackName，构造形如 &amp;gt; i.yyy.call(undefined, &amp;lsquo;你要的数据&amp;rsquo;) &amp;gt; ii.yyy(&amp;lsquo;你要的数据&amp;rsquo;) &amp;gt; 这样的响应 &amp;gt; 3.浏览器接收到响应，就会执行 yyy.call(undefined, &amp;lsquo;你要的数据&amp;rsquo;) &amp;gt; 4.那么请求方就知道了他要的数据 &amp;gt;这就是JSONP</description>
    </item>
    
    <item>
      <title>计算属性和方法</title>
      <link>http://example.org/posts/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 25 Sep 2019 16:26:04 +0800</pubDate>
      
      <guid>http://example.org/posts/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</guid>
      <description>计算属性 通过一个实例引入计算属性 需求：将字符串123，456，789翻转变成789，456，123 方法一：通过模块内表达式实现
&amp;lt;div id=&amp;quot;demo1&amp;quot;&amp;gt; {{ text }} {{ text.split(&#39;,&#39;).reverse().join(&#39;,&#39;) }} &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: &#39;#demo1&#39;, data:{ text: &#39;123,456,789&#39; } }) &amp;lt;/script&amp;gt;  方法二：通过计算属性实现
&amp;lt;div id=&amp;quot;demo2&amp;quot;&amp;gt; {{text}} {{reverseText}} &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el: &#39;#demo1&#39;, data:{ text: &#39;123,456,789&#39; }, computed:{ reverseText:function(){ return this.text.split(&#39;,&#39;).reverse().join(&#39;,&#39;) } } }) &amp;lt;/script&amp;gt;  由此可以看出：
 模块内表达式非常便利，但只能用于简单的运算，在模块中放入太多逻辑会使模块臃肿难以维护； 计算属性也可以实现，并且可以处理复杂逻辑。  方法（methods）  计算缓存、 Methods，两者的区别： 只要发生重新渲染，methods 调用总会执行指定函数。但是计算属性却不一定，它是依赖缓存的。
&amp;lt;div id =&amp;quot;date&amp;quot;&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>vue 指令事件</title>
      <link>http://example.org/posts/vue-%E6%8C%87%E4%BB%A4%E5%92%8C%E4%BA%8B%E4%BB%B6%E7%AD%89/</link>
      <pubDate>Tue, 24 Sep 2019 16:26:04 +0800</pubDate>
      
      <guid>http://example.org/posts/vue-%E6%8C%87%E4%BB%A4%E5%92%8C%E4%BA%8B%E4%BB%B6%E7%AD%89/</guid>
      <description>过滤器 Vue.js支持在 {{}} 插值的尾部添加一小管道符 &amp;ldquo;|&amp;rdquo; 对数据进行过滤，经常用于格式化文本，比如字母全部大写、货币千位使用逗号分隔等。过滤的规则是自定义的,通过给 Vue 实例添加选项 filters 来设置过滤器： {{ data | filter1 |filter2}} {{date | formatDate(66,99)}}中的第一个和第二个参数，分别对应过滤器的第二个和第三个参数
指令和事件 指令（Directives）是 Vue 模板中最常用的一项功能，它带有前缀 v-，能帮我们快速完成DOM操作。循环渲染。显示和隐藏。
 v-­text:解析文本 和{{ }} 作用一样
 v­-html:解析html
 v-­bind: v­bind 的基本用途是动态更新 HTML 元素上的属性，比如 id、class 等
 v-­on: 它用来绑定事件监听器
v­-on具体介绍 在普通元素上，v-­on可以监听原生的 DOM 事件，除了 click 外，还有dblclick、 keyup, mousemove 等。表达式可以是一个方法名，这些方法都写在 Vue 实例的 methods 属性内，并且是函数的形式，函数内的 this 指向的是当前 Vue 实例本身，因此可以直接使用 this.xxx形式来访问或修改数据
 vue中用到的所有方法都定义在methods中
  语法糖  语法糖是指在不影响功能的情况下，添加某种简洁方法实现同样的效果，从而更加方便程序开发。 v-bind ——&amp;gt; : (冒号) v-on ——&amp;gt; @  实例 &amp;lt;!</description>
    </item>
    
    <item>
      <title>vue基础之实例与数据绑定</title>
      <link>http://example.org/posts/vue%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Tue, 24 Sep 2019 15:30:30 +0800</pubDate>
      
      <guid>http://example.org/posts/vue%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>vue实例和数据绑定  cdn引入vue.js：&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 通过构造函数 Vue 就可以创建一个 Vue 的根实例，并启动 Vue 应用&amp;mdash;入口
var app ＝new Vue({ el:&#39;&#39;, data:{ } })  必不可少的一个选项就是 el 。 el 用于指定一个页面中己存在的 DOM 元素来挂载 Vue实例,可以是标签。也可以是css语法。
 通过 Vue 实例的 data 选项，可以声明应用内需要双向绑定的数据。建议所有会用到的数据都预先在 data 内 声明，这样不至于将数据散落在业务逻辑中，难以维护。也可以指向一个已经有的变量。
 挂载成功后，我们可以通过 app.$el 来访问该元素。Vue 提供了很多常用的实例属性与方法，都以 el,app. &amp;mdash;访问data元素的属性&amp;mdash; 直接app.属性名，app.msg
  生命周期钩子 created: * 实例创建完成后调用，此阶段完成了数据的观测等，但尚未挂载， $el 还不可用； * 需要初始化处理一些数据时会比较有用.&amp;mdash;-还未挂载； mounted el: * 挂载到实例上后调用，一般我们的第一个业务逻辑会在这里开始； * 相当于 $(document).ready()&amp;mdash;刚刚挂载； beforeDestroy: * 实例销毁之前调用； * 主要解绑一些使用 addEventListener 监听的事件等。</description>
    </item>
    
    <item>
      <title>如何使用 hugo 搭建个人博客</title>
      <link>http://example.org/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 20 Sep 2019 19:17:26 +0800</pubDate>
      
      <guid>http://example.org/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>本文默认大家都会在github上部署自己的博客，在此基础上，阐述如何使用hugo搭建一个自己的博客平台，hugo是用go语言实现的一个博客生成器。用它不需要有多好的基础，照着抄代码就行。本文于官方教程的区别是，详细，够详细！基本能避免实现过程中的一些暗坑。
第一步  下载 hugo 安装包，解压到 D 盘 Software 目录下，（随便你解压到哪，只不过，后面配置环境变量添加 PATH 时记得把你所解压到的文件地址加上就行了），设置环境变量，在 PATH 中添加 D:\Software\hugo,(一定要有 hugo )。到此，之后都不用管这个安装包以及 hugo.exe 了。
 下载地址一般到官网 hugo下载 选择你需要的版本。
 搞定之后可以打开命令行工具运行
hugo version  来检查你是否下载安装成功，如果执行上面命令后显示 hugo 的版本号及一些事件日期信息，则代表成功。
  第二步  进入官网 hugo 官网，点击 Quick Start 你便可得到一份官方的指南，指南上的第一步上面已经做完了。 接下来可以按照它的提示照抄代码在你的终端运行。 进入 D 盘创建一个博客站点的存放文件如 codes ,
cd codes hugo new site quickstart  //此处的 quickstart 必须更换为你的 github 用户名.github.io-creator (比如我的是 wuxiaod.github.io-creator,其中 -creator 代表创建的只是一个生成器，具体为何，后面会讲，其实就是一个备份)
 运行成功后会在 codes 里面生成一个 wuxiaod.github.io-creator 的文件夹，里面有几个初始目录文件如 content、themes 等。</description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Fri, 20 Sep 2019 18:32:04 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>hello everyone nice to meet you !</description>
    </item>
    
  </channel>
</rss>